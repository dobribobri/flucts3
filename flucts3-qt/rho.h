#ifndef RHO_H
#define RHO_H

#include <map>

class RHO {
private:
    std::map<int, double> rho_max_map = {
        { 100, 588.208 },
        { 99, 569.071 },
        { 98, 550.375 },
        { 97, 532.125 },
        { 96, 514.401 },
        { 95, 497.209 },
        { 94, 480.394 },
        { 93, 464.119 },
        { 92, 448.303 },
        { 91, 432.885 },
        { 90, 417.935 },
        { 89, 403.380 },
        { 88, 389.225 },
        { 87, 375.471 },
        { 86, 362.124 },
        { 85, 350.186 },
        { 84, 336.660 },
        { 83, 324.469 },
        { 82, 311.616 },
        { 81, 301.186 },
        { 80, 290.017 },
        { 79, 279.278 },
        { 78, 268.806 },
        { 77, 258.827 },
        { 76, 248.840 },
        { 75, 239.351 },
        { 74, 230.142 },
        { 73, 221.212 },
        { 72, 212.648 },
        { 71, 204.286 },
        { 70, 196.213 },
        { 69, 188.429 },
        { 68, 180.855 },
        { 67, 173.575 },
        { 66, 166.507 },
        { 65, 159.654 },
        { 64, 153.103 },
        { 63, 146.771 },
        { 62, 140.659 },
        { 61, 134.684 },
        { 60, 129.020 },
        { 59, 123.495 },
        { 58, 118.199 },
        { 57, 113.130 },
        { 56, 108.200 },
        { 55, 103.453 },
        { 54, 98.883 },
        { 53, 94.483 },
        { 52, 90.247 },
        { 51, 86.173 },
        { 50, 82.257 },
        { 49, 78.497 },
        { 48, 74.871 },
        { 47, 71.395 },
        { 46, 68.056 },
        { 45, 64.848 },
        { 44, 61.772 },
        { 43, 58.820 },
        { 42, 55.989 },
        { 41, 53.274 },
        { 40, 50.672 },
        { 39, 48.181 },
        { 38, 45.593 },
        { 37, 43.508 },
        { 36, 41.322 },
        { 35, 39.286 },
        { 34, 37.229 },
        { 33, 35.317 },
        { 32, 33.490 },
        { 31, 31.744 },
        { 30, 30.078 },
        { 29, 28.488 },
        { 28, 26.970 },
        { 27, 25.524 },
        { 26, 24.143 },
        { 25, 22.830 },
        { 24, 21.578 },
        { 23, 20.386 },
        { 22, 19.252 },
        { 21, 18.191 },
        { 20, 17.148 },
        { 19, 16.172 },
        { 18, 15.246 },
        { 17, 14.367 },
        { 16, 13.531 },
        { 15, 12.739 },
        { 14, 11.987 },
        { 13, 11.276 },
        { 12, 10.600 },
        { 11, 9.961 },
        { 10, 9.356 },
        { 9, 8.784 },
        { 8, 8.234 },
        { 7, 7.732 },
        { 6, 7.246 },
        { 5, 6.790 },
        { 4, 6.395 },
        { 3, 5.953 },
        { 2, 5.570 },
        { 1, 5.209 },
        { 0, 4.868 },
        { -1, 4.487 },
        { -2, 4.135 },
        { -3, 3.889 },
        { -4, 3.513 },
        { -5, 3.238 },
        { -6, 2.984 },
        { -7, 2.751 },
        { -8, 2.537 },
        { -9, 2.339 },
        { -10, 2.156 },
        { -11, 1.960 },
        { -12, 1.800 },
        { -13, 1.650 },
        { -14, 1.510 },
        { -15, 1.380 },
        { -16, 1.270 },
        { -17, 1.150 },
        { -18, 1.050 },
        { -19, 0.960 },
        { -20, 0.880 },
        { -21, 0.800 },
        { -22, 0.730 },
        { -23, 0.660 },
        { -24, 0.600 },
        { -25, 0.550 },
        { -26, 0.510 },
        { -27, 0.460 },
        { -28, 0.410 },
        { -29, 0.370 },
        { -30, 0.330 },
        { -31, 0.301 },
        { -32, 0.271 },
        { -33, 0.244 },
        { -34, 0.220 },
        { -35, 0.198 },
        { -36, 0.178 },
        { -37, 0.160 },
        { -38, 0.144 },
        { -39, 0.130 },
        { -40, 0.117 },
        { -41, 0.104 },
        { -42, 0.093 },
        { -43, 0.083 },
        { -44, 0.075 },
        { -45, 0.067 },
        { -46, 0.060 },
        { -47, 0.054 },
        { -48, 0.048 },
        { -49, 0.043 },
        { -50, 0.038 },
        { -51, 0.034 },
        { -52, 0.030 },
        { -53, 0.027 },
        { -54, 0.024 },
        { -55, 0.021 },
        { -56, 0.019 },
        { -57, 0.017 },
        { -58, 0.015 },
        { -59, 0.013 },
        { -60, 0.011 },
        { -65, 0.00640 },
        { -70, 0.00330 },
        { -75, 0.00130 },
        { -80, 0.00060 },
        { -85, 0.00025 },
        { -90, 0.00010 }
    };
public:
    double get_rho_max(double _temperature_cels) {
        int T = int(_temperature_cels);
        for (std::map<int, double>::iterator it = rho_max_map.begin(); it != rho_max_map.end(); it++)
            if (it->first <= T) return it->second;
        return 7.5;
    }

    double get(double _temperature_cels, double rho_related) {

        double rho_max = this->get_rho_max(_temperature_cels);
        //return rho_related * rho_max;

        return 7.5;
    }
};

#endif // RHO_H
